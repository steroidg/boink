#!/usr/bin/env bash

print_usage () {
  local PROGNAME="${1}"
  if [ -z "${PROGNAME}" ]; then
    echo "f:${FUNCNAME[0]} l:${LINENO} ERROR: No program name specified."
    return 1
  fi

  echo "A script to spawn tmux sessions/layouts I like"
  echo ""
  echo "Usage: ${PROGNAME} layout"
  echo "    layout: layout 1 (codeing) or 2 (terms)"
  echo ""
  echo "  Options:"
  echo "    -d: Debug mode."
  echo "    -s: Starting directory."
  echo "    -h: Print out this message."

  return 0
}

layout_1() {
  if [ $# -ne 1 ]; then
    echo "f:${FUNCNAME[0]} l:${LINENO} ERROR: incorrect number of arguments."
    return 1
  fi
  local N_PANES=$(tmux list-panes | wc -l)

  case ${N_PANES} in
    1)
      [ -z "${TMUX}" ] && tmux new-session -d -s 'coding' 'bash'
      tmux split-window -v -l ${LT_HEIGHT} "bash"
      tmux split-window -h "bash"
      tmux select-pane -t:.1
      ;;
    3)
      tmux resize-pane -t 3 -y ${LT_HEIGHT}
      ;;
    *) return 0 ;;
  esac

  [ -z "${TMUX}" ] && tmux -2 attach-session -d

  return 0
}

layout_2() {
  local SESSION_NAME='terms'
  # Not in a tmux session
  if [ -z "${TMUX}" ]; then
    local SESSION_EXISTS
    SESSION_EXISTS=$(tmux ls | grep ^${SESSION_NAME})

    if [ -n "${SESSION_EXISTS}" ]; then
      if ! echo "${SESSION_EXISTS}" | grep -q attached\)$; then
        # Reattach existing session when not attached
        tmux -2 attach-session -t ${SESSION_NAME}
      fi
      return 0
    fi

    # Create new session
    tmux new-session -d -s ${SESSION_NAME} 'bash'
  fi

  tmux split-window -h 'bash'
  tmux split-window -v 'bash'
  tmux select-pane -t:.1
  tmux split-window -v 'bash'
  tmux select-pane -t:.1
  [ -z "${TMUX}" ] && tmux -2 attach-session -d
  return 0
}

layout_3() {
  if [ $# -ne 1 ]; then
    echo "f:${FUNCNAME[0]} l:${LINENO} ERROR: incorrect number of arguments."
    return 1
  fi

  local LT_HEIGHT=${1}
  [ -z "${TMUX}" ] && tmux new-session -d -s 'coding' 'bash'
  tmux split-window -v -l "${LT_HEIGHT}" "sleep 1; tmux resize-pane -y ${LT_HEIGHT}; tmux select-pane -t:.1; bash"
  tmux split-window -h -p 66 'bash'
  tmux split-window -h -p 50 'bash'
  [ -z "${TMUX}" ] && tmux -2 attach-session -d

  return 0
}

layout_4() {
  local SESSION_NAME='chat'
  # Not in a tmux session
  if [ -z "${TMUX}" ]; then
    local SESSION_EXISTS
    SESSION_EXISTS=$(tmux ls | grep ^${SESSION_NAME})

    if [ -n "${SESSION_EXISTS}" ]; then
      if ! echo "${SESSION_EXISTS}" | grep -q attached\)$; then
        # Reattach existing session when not attached
        tmux -2 attach-session -t ${SESSION_NAME}
      fi
      return 0
    fi

    # Create new session
    tmux new-session -d -s ${SESSION_NAME} 'irssi'
    tmux split-window -v -l "${LT_HEIGHT}" "sleep 1; tmux resize-pane -y ${LT_HEIGHT}; tmux select-pane -t:.1; top"
    tmux -2 attach-session -d
    return 0
  fi

  echo "This layout is meant for new sessions only."
  return 0
}

main () {
  DEBUG_MODE='OFF'
  local PROGNAME
  PROGNAME=$(basename "${0}")
  local START_DIR=''
  local LT_HEIGHT=15

  while getopts dhs:l: opts; do
    case ${opts} in
      d) DEBUG_MODE='ON'
         ;;
      s) local START_DIR=${OPTARG}
         ;;
      l) local LT_HEIGHT=${OPTARG}
         ;;
      h) print_usage "${PROGNAME}"
         exit 0
         ;;
      *) print_usage "${PROGNAME}"
         exit 0
         ;;
    esac
  done
  shift "$(( OPTIND - 1 ))"

  readonly DEBUG_MODE;

  if [ $# -lt 1 ]; then
    echo "ERROR: Wrong number of arguments."
    print_usage "${PROGNAME}"
    exit 1
  fi

  readonly START_DIR
  readonly LT_HEIGHT
  local LAYOUT=${1}

  if [ -n "${START_DIR}" ]; then
    if [ ! -d "${START_DIR}" ]; then
      echo "f:${FUNCNAME[0]} l:${LINENO} ERROR: ${START_DIR} is not a directory."
      exit 1
    fi
    if ! cd "${START_DIR}"; then
      echo "f:${FUNCNAME[0]} l:${LINENO} ERROR: Unable to cd to ${START_DIR}."
      exit 1
    fi
  fi

  case ${LAYOUT} in
    1) layout_1 "${LT_HEIGHT}" || exit 1
      ;;
    2) layout_2 || exit 1
      ;;
    3) layout_3 "${LT_HEIGHT}" || exit 1
      ;;
    4) layout_4 "${LT_HEIGHT}" || exit 1
      ;;
    *)
      echo "f:${FUNCNAME[0]} l:${LINENO} ERROR: Invalid layout [${LAYOUT}]."
      print_usage "${PROGNAME}"
      exit 1
      ;;
  esac
}

main "$@"
